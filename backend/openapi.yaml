openapi: 3.0.0
info:
  title: CareerAhead
  version: 0.1.0-alpha
  contact:
    name: Pankaj Vishw
    email: vishw.dev.1000@gmail.com
servers:
  - url: http://localhost:{port}/api
    variables:
      port:
        default: "7575"
tags:
  - name: Authentication
    description: Authentication and Authorization related tasks
  - name: Wallet
  - name: Webhook
  - name: Counsellor

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    signedTokenAuth:
      type: apiKey
      name: token
      in: query
      description: >
        A short-lived signed token used to access specific secure endpoints. 
        The token is generated by the `/api/auth/token/signed-token` endpoint 
        and is valid for 3 minutes. Include it as a query parameter in requests 
        to protected endpoints.
        To get this token you need to have valid access token.
    RazorpaySignature:
      type: apiKey
      in: header
      name: X-Razorpay-Signature
      description: Signature sent by Razorpay to verify the authenticity of the webhook

  schemas:
    UUID:
      description: UUID
      type: string
      format: uuid
      example: be99f5eb-d042-4181-9a59-3708f41a0064
    UserId:
      description: UUID of User
      allOf:
        - $ref: "#/components/schemas/UUID"
    WalletId:
      description: UUID of Wallet
      allOf:
        - $ref: "#/components/schemas/UUID"
    PaymentId:
      description: UUID of Payment
      allOf:
        - $ref: "#/components/schemas/UUID"
    RechargeId:
      description: UUID of Recharge/Order
      allOf:
        - $ref: "#/components/schemas/UUID"
    FundAccountId:
      description: id of Fund account
      type: string
      example: fa_Pc8QY1tRJ0xYAU
    CounsellorId:
      description: UUID of counsellor
      type: string
      example: fa_Pc8QY1tRJ0xYAU

    ListPayload:
      description: List of data
      type: object
      properties:
        meta:
          type: object
          properties:
            totalItems:
              type: integer
              minimum: 0
              example: 103
            currentItems:
              type: integer
              minimum: 1
              example: 10
            size:
              type: integer
              minimum: 1
              example: 10
            totalPages:
              type: integer
              minimum: 0
              example: 11
            currentPage:
              type: integer
              minimum: 1
              example: 2
        items:
          type: array
          items:
            type: object

    RechargeList:
      description: Recharges List
      allOf:
        - $ref: "#/components/schemas/ListPayload"
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/Recharge"
    WithdrawalsList:
      description: Withdrawals List
      allOf:
        - $ref: "#/components/schemas/ListPayload"
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/Withdrawal"
    FundAccountList:
      description: Fund Account List
      allOf:
        - $ref: "#/components/schemas/ListPayload"
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/FundAccount"

    VPAPayload:
      description: Vpa Payload
      type: object
      properties:
        vpa:
          type: object
          properties:
            username:
              type: string
              example: pankaj
              readOnly: true
            handle:
              type: string
              example: exampleupi
              readOnly: true
            address:
              type: string
              example: pankaj@exampleupi
          required:
            - username
            - handle
            - address
      required:
        - vpa
    BankAccountPayload:
      description: Bank account Payload
      type: object
      properties:
        bank_account:
          type: object
          properties:
            ifsc:
              type: string
              example: HDFC0000055
            bank_name:
              type: string
              example: HDFC Bank
              readOnly: True
            name:
              type: string
              example: sunny
              readOnly: true
            account_number:
              type: string
              example: "765432123456789"
          required:
            - ifsc
            - bank_name
            - name
            - account_number
      required:
        - bank_account
    FundAccount:
      description: Fund Account
      type: object
      allOf:
        - type: object
          properties:
            id:
              type: string
              example: fa_PgalJyqsz2tvjg
              readOnly: true
            account_type:
              type: string
              enum:
                - vpa
                - bank_account
            contact_id:
              type: string
              example: cont_PgadVKPATFyJSb
              readOnly: true
          required:
            - id
            - account_type
            - contact_id
        - oneOf:
            - $ref: "#/components/schemas/VPAPayload"
            - $ref: "#/components/schemas/BankAccountPayload"
      discriminator:
        propertyName: account_type
        mapping:
          vpa: "#/components/schemas/VPAPayload"
          bank_account: "#/components/schemas/BankAccountPayload"

    ErrorPayload:
      description: Error Payload
      type: object
      properties:
        status_code:
          type: integer
          format: int32
          example: 500
        message:
          type: string
          nullable: true
          example: Something went wrongs
        messages:
          type: array
          items:
            type: string
      required:
        - status_code
        - message
    GeneralErrorMessage:
      description: General Error Message
      type: object
      properties:
        error:
          $ref: "#/components/schemas/ErrorPayload"
    Wallet:
      description: Wallet
      type: object
      properties:
        user:
          $ref: "#/components/schemas/UserId"
        balance:
          description: Balance in paise
          type: integer
          example: 9921
        is_active:
          description: State of wallet
          type: boolean
    Recharge:
      description: Recharge
      type: object
      properties:
        user:
          $ref: "#/components/schemas/UserId"
        wallet:
          $ref: "#/components/schemas/WalletId"
        amount:
          type: integer
          example: 50
        currency:
          type: string
          example: "INR"
        payment_id:
          $ref: "#/components/schemas/PaymentId"
        order_id:
          $ref: "#/components/schemas/RechargeId"
        status:
          type: string
          enum:
            - Created
            - Attempted
            - Paid
            - Failed
    Withdrawal:
      description: Withdrawal
      type: object
      properties:
        wallet:
          $ref: "#/components/schemas/WalletId"
        amount:
          type: integer
          example: 400
        state:
          type: string
          enum:
            - Pending
            - Done
            - Failed
    Counsellor:
      type: object
      description: Counsellor
      properties:
        id:
          $ref: "#/components/schemas/CounsellorId"

  parameters:
    RefreshTokenCookie:
      name: --rt-k
      description: |
        The refresh token saved in cookie during login 
        if `in_cookie` was set to true.
        It it's set you don't need to pass refresh_token in body.
      in: cookie
      required: false
      schema:
        type: string
        example: lwfjlewkfjlwekflwekfjoweifjwelkfewolkfjwo...

    Pagination:
      name: Pagination
      in: query
      description: Pagination parameters for paginated lists
      required: false
      explode: true
      style: form
      schema:
        type: object
        properties:
          page:
            type: integer
            description: Page number (starting from 1)
            example: 1
            default: 1
          size:
            type: integer
            description: Number of items per page
            example: 10
            default: 10
    CounsellorId:
      name: counsellor_id
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/CounsellorId"

  responses:
    EmptySuccessfullResponse:
      description: Successfull
    GeneralErrorResponse:
      description: Request Failed
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GeneralErrorMessage"
security:
  - BearerAuth: []

paths:
  /auth/login:
    post:
      operationId: login
      tags:
        - Authentication
      description: |
        Authenticates a user and returns an access token and a refresh token. 
        The behavior can be customized by passing the `in_body` and `in_cookie` parameters:
        - `in_body`: If set to false, the refresh token is not included in the response body.
        - `in_cookie`: If set to true, the refresh token is set as an HTTP-only cookie.

        They are optional and If not provided 
        server proceed with `in_body: false` and `in_cookie: true`
        for safety purposes for frontend.
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: myemail@example.com
                password:
                  type: string
                  format: password
                  example: mysecretpassword
                in_body:
                  type: boolean
                  default: true
                in_cookie:
                  type: boolean
                  default: false
              required:
                - email
                - password
      responses:
        "200":
          description: Successfully Logged in
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                  refresh_token:
                    type: string
                required:
                  - access_token
          headers:
            Set-Cookie:
              description: contains the refresh_token if 'in_cookie' is true.
              schema:
                type: string
                example: --rt-k=dGhpcyBpcyBhIHNhbXBsZSB0b2tlbi4; HttpOnly; lax; Path=/token/refresh
        default:
          $ref: "#/components/responses/GeneralErrorResponse"

  /auth/token/access:
    post:
      description: |
        Use a refresh token to generate a new access token. The refresh token can be provided in two ways:
        1. As a `refresh_token` field in the JSON body.
        2. Automatically retrieved from an HTTP-only cookie if stored during login.
      operationId: getAccessToken
      tags:
        - Authentication
      parameters:
        - $ref: "#/components/parameters/RefreshTokenCookie"
      security: []

      responses:
        "200":
          description: Successfully got the access token
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
        default:
          $ref: "#/components/responses/GeneralErrorResponse"

  /auth/logout:
    post:
      description: |
        Invalidates refresh token passed which makes it 
        not able to get new access token using the provided refresh token. 
        Remember just because you make request to `/auth/logout` doesn't mean 
        now your access token is also invalidated. You can still access api 
        using same access token until it expires (generally 30 minutes). You should 
        still manage it securely or discard it.
        You also need to pass access token in Authorization header, if sending
        refresh token in cookie. This is for browser frontend for csrf issue. 
        Otherwise if you are sending refresh_token in body then you don't need 
        to pass access_token.
      operationId: logout
      tags:
        - Authentication
      security: []
      parameters:
        - $ref: "#/components/parameters/RefreshTokenCookie"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                refresh_token:
                  type: string
      responses:
        "200":
          description: Successfully Logged out.
        default:
          $ref: "#/components/responses/GeneralErrorResponse"

  /auth/token/signed-token:
    get:
      description: |
        Returns short lived signed token which is valid 
        for generally 2-5 minutes (based on server config).
        you can use this token to access certain endpoints 
        as alternative to access token for authentication.
        You need to pass it as url param with key `token`
        on endpoints which you would like to access. 
        It's to make requesting certain pages easy where it's 
        not easy to pass access_token in header.
      tags:
        - Authentication
      operationId: getSignedToken
      responses:
        "200":
          description: Successfully Generated token
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: be99f5eb-d042-4181-9a59-3708f41a0064:1tV3kA:5vlVWm62Al8KHkajC7BG9TFGi36cPk09z0DlXyh1LN0
        default:
          $ref: "#/components/responses/GeneralErrorResponse"

  /wallet:
    get:
      description: |
        Returns the data about your wallet.
      tags:
        - Wallet
      operationId: getWallet
      responses:
        "200":
          description: Fetched wallet data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Wallet"
        default:
          $ref: "#/components/responses/GeneralErrorResponse"

  /wallet/recharges:
    get:
      description: Fetches list of recharges
      operationId: getRecharges
      tags:
        - Wallet
      parameters:
        - $ref: "#/components/parameters/Pagination"
      responses:
        "200":
          description: Fetched Successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RechargeList"

    post:
      description: |
        Create New Recharge which will be added to wallet
        once Successfull.
      operationId: createRecharge
      tags:
        - Wallet
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  type: integer
                  example: 400
              required:
                - amount
      responses:
        "201":
          description: Successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Recharge"
        default:
          $ref: "#/components/responses/GeneralErrorResponse"

  /wallet/recharges/{recharge_id}:
    get:
      description: |
        Details of Recharge and way to complete payments.
        To pay payment request text/html type content. 
        It will return html page with functionality to complete
        payment.
      operationId: getRecharge
      tags:
        - Wallet
      security:
        - BearerAuth: []
        - signedTokenAuth: []
      responses:
        "200":
          description: Successfull
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Recharge"
            text/html:
              schema:
                type: string
                example: "<html><body><h1>HTML Response</h1></body></html>"

  /wallet/recharges/{recharge_id}/verify:
    post:
      description: Verifies the recharge/order
      operationId: verifyRecharge
      tags:
        - Wallet
      parameters:
        - name: recharge_id
          in: path
          required: true
          schema:
            type: string
            example: order_ifoejfklewfjoei
      security:
        - BearerAuth: []
        - signedTokenAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                payment_id:
                  $ref: "#/components/schemas/PaymentId"
                signature:
                  type: string
                  example: 4DediF-32DFF3090fF#209jFFEDFWEF330903F
      responses:
        "200":
          description: |
            Recharge is verified and money 
            is added to your wallet
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Recharge"

  /wallet/withdrawals:
    post:
      description: Create new withdrawal
      operationId: createWithdrawal
      tags:
        - Wallet
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  type: integer
                  format: int64
                  example: 500
                fund_account_id:
                  $ref: "#/components/schemas/FundAccountId"
              required:
                - amount
                - fund_account_id
      responses:
        "200":
          description: Successfully created withdrawal
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Withdrawal"
        default:
          $ref: "#/components/responses/GeneralErrorResponse"

    get:
      description: |
        Fetches withdrawals
      operationId: getWithdrawals
      tags:
        - Wallet
      parameters:
        - $ref: "#/components/parameters/Pagination"
      responses:
        "200":
          description: Successfully fetched withdrawal list
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WithdrawalsList"

  /wallet/fund-accounts:
    post:
      description: |
        Creates new Fund account on which you can withdraw money
      operationId: createFundAccount
      tags:
        - Wallet
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FundAccount"

      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FundAccount"

    get:
      description: Fetches list of Fund accounts
      parameters:
        - $ref: "#/components/parameters/Pagination"
      tags:
        - Wallet
      operationId: getFundAccounts
      responses:
        "200":
          description: Successfull
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FundAccountList"

  /wallet/webhook:
    post:
      description: This endpoint listens for webhook events from Razorpay. Ensure the payload and signature are validated for authenticity.
      operationId: handleRazorpayWebhook
      tags:
        - Webhook
      security:
        - RazorpaySignature: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                entity:
                  type: string
                  example: event
                account_id:
                  type: string
                  example: acc_123456789
                event:
                  type: string
                  example: payment.captured
                contains:
                  type: array
                  items:
                    type: string
                    example:
                      - payment
                      - order
                payload:
                  type: object
                  description: Event specific data
                  example:
                    payment:
                      id: pay_123456789
                      entity: payment
                      amount: 500
                    order:
                      id: order_123456789
                      entity: order
                      amount: 500
                created_at:
                  type: integer
                  format: int64
                  example: 163123456789
      responses:
        "200":
          description: Successfully handled the webhook event
        default:
          $ref: "#/components/responses/GeneralErrorResponse"

          description: Successfully fetched counsellor details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Counsellor"

